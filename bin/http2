#!/usr/bin/env php
<?php

require \dirname(__DIR__) . "/vendor/autoload.php";

use Amp\ByteStream\ResourceOutputStream;
use Amp\Http\Server\HttpServer;
use Amp\Http\Server\RequestHandler\CallableRequestHandler;
use Amp\Http\Server\Response;
use Amp\Http\Status;
use Amp\Log\ConsoleFormatter;
use Amp\Log\StreamHandler;
use Amp\Socket;
use Monolog\Logger;

$options = getopt('', ['port:']);

if (!isset($options['port']) || !\is_numeric($options['port'])) {
    throw new \Exception('Invalid --port option');
}

$port = (int) $options['port'];

Amp\Loop::run(static function () use ($port) {
    $key = (new Kelunik\Acme\Crypto\RsaKeyGenerator)->generateKey();
    $keyFile = \tempnam(\sys_get_temp_dir(), 'http2-');

    $csrGenerator = new Kelunik\Acme\Csr\OpensslCsrGenerator;
    $csr = yield $csrGenerator->generateCsr($key, ['localhost']);

    $certFile = \tempnam(\sys_get_temp_dir(), 'http2-');
    $cert = \openssl_csr_sign($csr, null, $key->toPem(), 7, []);
    if ($cert === false) {
        throw new \Exception('Failed to create certificate');
    }

    \openssl_x509_export($cert, $certPem);
    \file_put_contents($certFile, $certPem);
    \file_put_contents($keyFile, $key->toPem());

    // Clear OpenSSL error queue
    while (\openssl_error_string() !== false);

    $cert = new Socket\Certificate($certFile, $keyFile);

    $context = (new Socket\BindContext)
        ->withTlsContext((new Socket\ServerTlsContext)->withDefaultCertificate($cert));

    $servers = [
        Socket\Server::listen("0.0.0.0:" . $port, $context),
        Socket\Server::listen("[::]:" . $port, $context),
    ];

    $logHandler = new StreamHandler(new ResourceOutputStream(STDOUT));
    $logHandler->setFormatter(new ConsoleFormatter);
    $logger = new Logger('server');
    $logger->pushHandler($logHandler);

    $server = new HttpServer($servers, new CallableRequestHandler(static function () {
        $response = new Response(Status::OK, [
            "content-type" => "text/plain; charset=utf-8"
        ], "Hello, World!");

        $response->push('/foo');

        return $response;
    }), $logger);

    yield $server->start();

    Amp\Loop::onSignal(\SIGINT, static function (string $watcherId) use ($server) {
        Amp\Loop::cancel($watcherId);
        yield $server->stop();
    });
});
